Before MISsched:
# Machine code for function leak: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0, %ESI in %vreg1, %EDX in %vreg2, %ECX in %vreg3

BB#0: derived from LLVM BB %entry
    Live Ins: %EDI %ESI %EDX %ECX
	%vreg3<def> = COPY %ECX; GR32:%vreg3
	%vreg2<def> = COPY %EDX; GR32:%vreg2
	%vreg1<def> = COPY %ESI; GR32:%vreg1
	%vreg0<def> = COPY %EDI; GR32:%vreg0
	MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg0; mem:ST4[%i1.addr] GR32:%vreg0
	MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%i2.addr] GR32:%vreg1
	MOV32mr <fi#2>, 1, %noreg, 0, %noreg, %vreg2; mem:ST4[%key.addr] GR32:%vreg2
	MOV32mr <fi#3>, 1, %noreg, 0, %noreg, %vreg3; mem:ST4[%i3.addr] GR32:%vreg3
	%vreg6<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%i1.addr] GR32:%vreg6
	%vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i2.addr] GR32:%vreg6
	MOV32mr <fi#4>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n1] GR32:%vreg6
	%vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#2>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%key.addr] GR32:%vreg6
	%vreg6<def,tied1> = XOR32ri8 %vreg6<tied0>, 1, %EFLAGS<imp-def,dead>; GR32:%vreg6
	MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n2] GR32:%vreg6
	%vreg6<def,tied1> = AND32rm %vreg6<tied0>, <fi#3>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i3.addr] GR32:%vreg6
	MOV32mr <fi#6>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n3] GR32:%vreg6
	%EAX<def> = COPY %vreg6; GR32:%vreg6
	RETQ %EAX<kill>

# End machine code for function leak.

********** MI Scheduling **********
leak:BB#0 entry
  From: %vreg3<def> = COPY %ECX; GR32:%vreg3
    To: RETQ %EAX<kill>
 RegionInstrs: 17 Remaining: 0
Max Pressure: GR8_ABCD_H=2
GR8_ABCD_L=2
GR8_NOREX=4
GR8_NOREX+GR64_NOREX_and_GR64_TC=6
GR8_NOREX+GR64_TCW64=4
GR64_NOREX=6
GR8=6
GR8_NOREX+GR64_TC=6
GR8+GR64_TCW64=6
GR64_NOREX+GR64_TC=6
GR8+GR64_NOREX=6
GR8+GR64_TC=6
GR64=8
Live In: %BL %BP %BX %CH %CL %DL 
Live Out: 
Live Thru: 
  LiveReg: AH
  LiveReg: AL
Excess PSets: 
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %vreg3<def> = COPY %ECX; GR32:%vreg3
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
   val SU(7): Latency=0 Reg=%vreg3

SU(1):   %vreg2<def> = COPY %EDX; GR32:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 10
  Successors:
   val SU(6): Latency=0 Reg=%vreg2

SU(2):   %vreg1<def> = COPY %ESI; GR32:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 14
  Successors:
   val SU(5): Latency=0 Reg=%vreg1

SU(3):   %vreg0<def> = COPY %EDI; GR32:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 18
  Successors:
   val SU(4): Latency=0 Reg=%vreg0

SU(4):   MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg0; mem:ST4[%i1.addr] GR32:%vreg0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 18
  Predecessors:
   val SU(3): Latency=0 Reg=%vreg0
  Successors:
   ch  SU(8): Latency=1

SU(5):   MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%i2.addr] GR32:%vreg1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 14
  Predecessors:
   val SU(2): Latency=0 Reg=%vreg1
  Successors:
   ch  SU(9): Latency=1

SU(6):   MOV32mr <fi#2>, 1, %noreg, 0, %noreg, %vreg2; mem:ST4[%key.addr] GR32:%vreg2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 10
  Predecessors:
   val SU(1): Latency=0 Reg=%vreg2
  Successors:
   ch  SU(11): Latency=1

SU(7):   MOV32mr <fi#3>, 1, %noreg, 0, %noreg, %vreg3; mem:ST4[%i3.addr] GR32:%vreg3
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Predecessors:
   val SU(0): Latency=0 Reg=%vreg3
  Successors:
   ch  SU(14): Latency=1

SU(8):   %vreg6<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%i1.addr] GR32:%vreg6
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 17
  Predecessors:
   ch  SU(4): Latency=1
  Successors:
   val SU(9): Latency=4 Reg=%vreg6
   out SU(9): Latency=0

SU(9):   %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i2.addr] GR32:%vreg6
  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 4
  Depth              : 5
  Height             : 13
  Predecessors:
   val SU(8): Latency=4 Reg=%vreg6
   out SU(8): Latency=0
   ch  SU(5): Latency=1
  Successors:
   val SU(11): Latency=4 Reg=%vreg6
   val SU(10): Latency=4 Reg=%vreg6
   out SU(11): Latency=0

SU(10):   MOV32mr <fi#4>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n1] GR32:%vreg6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 9
  Predecessors:
   val SU(9): Latency=4 Reg=%vreg6
  Successors:
   antiSU(11): Latency=0

SU(11):   %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#2>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%key.addr] GR32:%vreg6
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 9
  Height             : 9
  Predecessors:
   val SU(9): Latency=4 Reg=%vreg6
   antiSU(10): Latency=0
   out SU(9): Latency=0
   ch  SU(6): Latency=1
  Successors:
   val SU(12): Latency=4 Reg=%vreg6
   out SU(12): Latency=0

SU(12):   %vreg6<def,tied1> = XOR32ri8 %vreg6<tied0>, 1, %EFLAGS<imp-def,dead>; GR32:%vreg6
  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 13
  Height             : 5
  Predecessors:
   val SU(11): Latency=4 Reg=%vreg6
   out SU(11): Latency=0
  Successors:
   val SU(14): Latency=1 Reg=%vreg6
   val SU(13): Latency=1 Reg=%vreg6
   out SU(14): Latency=0

SU(13):   MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n2] GR32:%vreg6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 4
  Predecessors:
   val SU(12): Latency=1 Reg=%vreg6
  Successors:
   antiSU(14): Latency=0

SU(14):   %vreg6<def,tied1> = AND32rm %vreg6<tied0>, <fi#3>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i3.addr] GR32:%vreg6
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 14
  Height             : 4
  Predecessors:
   val SU(12): Latency=1 Reg=%vreg6
   antiSU(13): Latency=0
   out SU(12): Latency=0
   ch  SU(7): Latency=1
  Successors:
   val SU(16): Latency=4 Reg=%vreg6
   val SU(15): Latency=4 Reg=%vreg6

SU(15):   MOV32mr <fi#6>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n3] GR32:%vreg6
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 18
  Height             : 0
  Predecessors:
   val SU(14): Latency=4 Reg=%vreg6

SU(16):   %EAX<def> = COPY %vreg6; GR32:%vreg6
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 18
  Height             : 0
  Predecessors:
   val SU(14): Latency=4 Reg=%vreg6
  Successors:
   ch  SU(4294967295) *: Latency=0

Critical Path(GS-RR ): 18
BotQ.A: 15 16 
  SU(15) ORDER                              
  SU(16) PREG-COPY                         
Pick Bot PREG-COPY
Scheduling SU(16) %EAX<def> = COPY %vreg6; GR32:%vreg6
  GR8_NOREX: 2 > 4(+ 0 livethru)
  LiveReg: %vreg6
  UpdateRegP: SU(16) %EAX<def> = COPY %vreg6; GR32:%vreg6
  UpdateRegP: SU(15) MOV32mr <fi#6>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n3] GR32:%vreg6
  UpdateRegP: SU(14) %vreg6<def,tied1> = AND32rm %vreg6<tied0>, <fi#3>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i3.addr] GR32:%vreg6
  UpdateRegP: SU(13) MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n2] GR32:%vreg6
  UpdateRegP: SU(12) %vreg6<def,tied1> = XOR32ri8 %vreg6<tied0>, 1, %EFLAGS<imp-def,dead>; GR32:%vreg6
  UpdateRegP: SU(11) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#2>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%key.addr] GR32:%vreg6
  UpdateRegP: SU(10) MOV32mr <fi#4>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n1] GR32:%vreg6
  UpdateRegP: SU(9) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i2.addr] GR32:%vreg6
  Ready @0c
  BotQ.A TopLatency SU(16) 18c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
Scheduling SU(15) MOV32mr <fi#6>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n3] GR32:%vreg6
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
Scheduling SU(14) %vreg6<def,tied1> = AND32rm %vreg6<tied0>, <fi#3>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i3.addr] GR32:%vreg6
  LiveReg: %vreg6
  UpdateRegP: SU(16) %EAX<def> = COPY %vreg6; GR32:%vreg6
  UpdateRegP: SU(15) MOV32mr <fi#6>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n3] GR32:%vreg6
  UpdateRegP: SU(14) %vreg6<def,tied1> = AND32rm %vreg6<tied0>, <fi#3>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i3.addr] GR32:%vreg6
  UpdateRegP: SU(13) MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n2] GR32:%vreg6
  UpdateRegP: SU(12) %vreg6<def,tied1> = XOR32ri8 %vreg6<tied0>, 1, %EFLAGS<imp-def,dead>; GR32:%vreg6
  UpdateRegP: SU(11) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#2>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%key.addr] GR32:%vreg6
  UpdateRegP: SU(10) MOV32mr <fi#4>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n1] GR32:%vreg6
  UpdateRegP: SU(9) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i2.addr] GR32:%vreg6
  Ready @4c
  BotQ.A BotLatency SU(14) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
BotQ.A: 13 7 
  SU(13) ORDER                              
Pick Bot ORDER     
Scheduling SU(13) MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n2] GR32:%vreg6
  Ready @4c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 4c
  - Latency limited.
BotQ.A: 7 12 
  SU(7) ORDER                              
  SU(12) ORDER                              
Pick Bot ORDER     
Scheduling SU(12) %vreg6<def,tied1> = XOR32ri8 %vreg6<tied0>, 1, %EFLAGS<imp-def,dead>; GR32:%vreg6
  LiveReg: %vreg6
  UpdateRegP: SU(16) %EAX<def> = COPY %vreg6; GR32:%vreg6
  UpdateRegP: SU(15) MOV32mr <fi#6>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n3] GR32:%vreg6
  UpdateRegP: SU(14) %vreg6<def,tied1> = AND32rm %vreg6<tied0>, <fi#3>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i3.addr] GR32:%vreg6
  UpdateRegP: SU(13) MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n2] GR32:%vreg6
  UpdateRegP: SU(12) %vreg6<def,tied1> = XOR32ri8 %vreg6<tied0>, 1, %EFLAGS<imp-def,dead>; GR32:%vreg6
  UpdateRegP: SU(11) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#2>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%key.addr] GR32:%vreg6
  UpdateRegP: SU(10) MOV32mr <fi#4>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n1] GR32:%vreg6
  UpdateRegP: SU(9) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i2.addr] GR32:%vreg6
  Ready @5c
  BotQ.A BotLatency SU(12) 5c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 5c
  - Latency limited.
BotQ.A: 7 11 
  SU(7) ORDER                              
  SU(11) ORDER                              
Pick Bot ORDER     
Scheduling SU(11) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#2>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%key.addr] GR32:%vreg6
  LiveReg: %vreg6
  UpdateRegP: SU(16) %EAX<def> = COPY %vreg6; GR32:%vreg6
  UpdateRegP: SU(15) MOV32mr <fi#6>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n3] GR32:%vreg6
  UpdateRegP: SU(14) %vreg6<def,tied1> = AND32rm %vreg6<tied0>, <fi#3>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i3.addr] GR32:%vreg6
  UpdateRegP: SU(13) MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n2] GR32:%vreg6
  UpdateRegP: SU(12) %vreg6<def,tied1> = XOR32ri8 %vreg6<tied0>, 1, %EFLAGS<imp-def,dead>; GR32:%vreg6
  UpdateRegP: SU(11) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#2>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%key.addr] GR32:%vreg6
  UpdateRegP: SU(10) MOV32mr <fi#4>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n1] GR32:%vreg6
  UpdateRegP: SU(9) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i2.addr] GR32:%vreg6
  Ready @9c
  BotQ.A BotLatency SU(11) 9c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 9c
  - Latency limited.
BotQ.A: 7 10 6 
  SU(7) ORDER                              
  SU(10) ORDER                              
Pick Bot ORDER     
Scheduling SU(10) MOV32mr <fi#4>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n1] GR32:%vreg6
  Ready @9c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 9c
  - Latency limited.
BotQ.A: 7 6 9 
  SU(7) ORDER                              
  SU(9) ORDER                              
Pick Bot ORDER     
Scheduling SU(9) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i2.addr] GR32:%vreg6
  LiveReg: %vreg6
  UpdateRegP: SU(16) %EAX<def> = COPY %vreg6; GR32:%vreg6
  UpdateRegP: SU(15) MOV32mr <fi#6>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n3] GR32:%vreg6
  UpdateRegP: SU(14) %vreg6<def,tied1> = AND32rm %vreg6<tied0>, <fi#3>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i3.addr] GR32:%vreg6
  UpdateRegP: SU(13) MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n2] GR32:%vreg6
  UpdateRegP: SU(12) %vreg6<def,tied1> = XOR32ri8 %vreg6<tied0>, 1, %EFLAGS<imp-def,dead>; GR32:%vreg6
  UpdateRegP: SU(11) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#2>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%key.addr] GR32:%vreg6
  UpdateRegP: SU(10) MOV32mr <fi#4>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n1] GR32:%vreg6
  UpdateRegP: SU(9) %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i2.addr] GR32:%vreg6
  Ready @13c
  BotQ.A BotLatency SU(9) 13c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 13c
  - Latency limited.
BotQ.A: 7 6 8 5 
  SU(7) ORDER                              
  SU(8) ORDER                              
Pick Bot ORDER     
Scheduling SU(8) %vreg6<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%i1.addr] GR32:%vreg6
  Ready @17c
  BotQ.A BotLatency SU(8) 17c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 17c
  - Latency limited.
BotQ.A: 7 6 5 4 
  SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) MOV32mr <fi#3>, 1, %noreg, 0, %noreg, %vreg3; mem:ST4[%i3.addr] GR32:%vreg3
  LiveReg: %vreg3
  UpdateRegP: SU(7) MOV32mr <fi#3>, 1, %noreg, 0, %noreg, %vreg3; mem:ST4[%i3.addr] GR32:%vreg3
  Ready @5c
BotQ.A @2c
  Retired: 9
  Executed: 2c
  Critical: 2c, 9 MOps
  ExpectedLatency: 17c
  - Latency limited.
BotQ.A: 4 6 5 0 
  SU(4) ORDER                              
  SU(6) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(6) MOV32mr <fi#2>, 1, %noreg, 0, %noreg, %vreg2; mem:ST4[%key.addr] GR32:%vreg2
  LiveReg: %vreg2
  UpdateRegP: SU(6) MOV32mr <fi#2>, 1, %noreg, 0, %noreg, %vreg2; mem:ST4[%key.addr] GR32:%vreg2
  Ready @10c
BotQ.A @2c
  Retired: 10
  Executed: 2c
  Critical: 2c, 10 MOps
  ExpectedLatency: 17c
  - Latency limited.
BotQ.A: 4 0 5 1 
  SU(4) ORDER                              
  SU(5) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(5) MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%i2.addr] GR32:%vreg1
  LiveReg: %vreg1
  UpdateRegP: SU(5) MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%i2.addr] GR32:%vreg1
  Ready @14c
BotQ.A @2c
  Retired: 11
  Executed: 2c
  Critical: 2c, 11 MOps
  ExpectedLatency: 17c
  - Latency limited.
BotQ.A: 4 0 1 2 
  SU(4) ORDER                              
Pick Bot PREG-COPY
Scheduling SU(4) MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg0; mem:ST4[%i1.addr] GR32:%vreg0
  LiveReg: %vreg0
  UpdateRegP: SU(4) MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg0; mem:ST4[%i1.addr] GR32:%vreg0
  Ready @18c
  BotQ.A BotLatency SU(4) 18c
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 18c
  - Latency limited.
BotQ.A: 2 0 1 3 
  SU(2) ORDER                              
  SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %vreg0<def> = COPY %EDI; GR32:%vreg0
  LiveReg: DIL
  Ready @18c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 18c
  - Latency limited.
BotQ.A: 2 0 1 
  SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %vreg1<def> = COPY %ESI; GR32:%vreg1
  LiveReg: SIL
  Ready @14c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 18c
  - Latency limited.
BotQ.A: 1 0 
  SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %vreg2<def> = COPY %EDX; GR32:%vreg2
  GR8_NOREX: 2 > 4(+ 0 livethru)
  LiveReg: DH
  LiveReg: DL
  Ready @10c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 18c
  - Latency limited.
Scheduling SU(0) %vreg3<def> = COPY %ECX; GR32:%vreg3
  GR8_ABCD_H: 2 > 4(+ 0 livethru)
  GR8_ABCD_L: 2 > 4(+ 0 livethru)
  GR8_NOREX: 4 > 4(+ 0 livethru)
  LiveReg: CH
  LiveReg: CL
  Ready @5c
BotQ.A @3c
  Retired: 12
  Executed: 3c
  Critical: 3c, 12 MOps
  ExpectedLatency: 18c
  - Latency limited.
*** Final schedule for BB#0 ***
SU(0):   %vreg3<def> = COPY %ECX; GR32:%vreg3
SU(1):   %vreg2<def> = COPY %EDX; GR32:%vreg2
SU(2):   %vreg1<def> = COPY %ESI; GR32:%vreg1
SU(3):   %vreg0<def> = COPY %EDI; GR32:%vreg0
SU(4):   MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg0; mem:ST4[%i1.addr] GR32:%vreg0
SU(5):   MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%i2.addr] GR32:%vreg1
SU(6):   MOV32mr <fi#2>, 1, %noreg, 0, %noreg, %vreg2; mem:ST4[%key.addr] GR32:%vreg2
SU(7):   MOV32mr <fi#3>, 1, %noreg, 0, %noreg, %vreg3; mem:ST4[%i3.addr] GR32:%vreg3
SU(8):   %vreg6<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%i1.addr] GR32:%vreg6
SU(9):   %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i2.addr] GR32:%vreg6
SU(10):   MOV32mr <fi#4>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n1] GR32:%vreg6
SU(11):   %vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#2>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%key.addr] GR32:%vreg6
SU(12):   %vreg6<def,tied1> = XOR32ri8 %vreg6<tied0>, 1, %EFLAGS<imp-def,dead>; GR32:%vreg6
SU(13):   MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n2] GR32:%vreg6
SU(14):   %vreg6<def,tied1> = AND32rm %vreg6<tied0>, <fi#3>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i3.addr] GR32:%vreg6
SU(15):   MOV32mr <fi#6>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n3] GR32:%vreg6
SU(16):   %EAX<def> = COPY %vreg6; GR32:%vreg6

********** INTERVALS **********
CH [0B,16r:0)  0@0B-phi
CL [0B,16r:0)  0@0B-phi
DH [0B,32r:0)  0@0B-phi
DIL [0B,64r:0)  0@0B-phi
DL [0B,32r:0)  0@0B-phi
SIL [0B,48r:0)  0@0B-phi
%vreg0 [64r,80r:0)  0@64r
%vreg1 [48r,96r:0)  0@48r
%vreg2 [32r,112r:0)  0@32r
%vreg3 [16r,128r:0)  0@16r
%vreg6 [144r,176r:2)[176r,224r:0)[224r,256r:1)[256r,304r:3)[304r,336r:4)  0@176r 1@224r 2@144r 3@256r 4@304r
RegMasks:
********** MACHINEINSTRS **********
# Machine code for function leak: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]
  fi#6: size=4, align=4, at location [SP+8]
Function Live Ins: %EDI in %vreg0, %ESI in %vreg1, %EDX in %vreg2, %ECX in %vreg3

0B	BB#0: derived from LLVM BB %entry
	    Live Ins: %EDI %ESI %EDX %ECX
16B		%vreg3<def> = COPY %ECX; GR32:%vreg3
32B		%vreg2<def> = COPY %EDX; GR32:%vreg2
48B		%vreg1<def> = COPY %ESI; GR32:%vreg1
64B		%vreg0<def> = COPY %EDI; GR32:%vreg0
80B		MOV32mr <fi#0>, 1, %noreg, 0, %noreg, %vreg0; mem:ST4[%i1.addr] GR32:%vreg0
96B		MOV32mr <fi#1>, 1, %noreg, 0, %noreg, %vreg1; mem:ST4[%i2.addr] GR32:%vreg1
112B		MOV32mr <fi#2>, 1, %noreg, 0, %noreg, %vreg2; mem:ST4[%key.addr] GR32:%vreg2
128B		MOV32mr <fi#3>, 1, %noreg, 0, %noreg, %vreg3; mem:ST4[%i3.addr] GR32:%vreg3
144B		%vreg6<def> = MOV32rm <fi#0>, 1, %noreg, 0, %noreg; mem:LD4[%i1.addr] GR32:%vreg6
176B		%vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#1>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i2.addr] GR32:%vreg6
192B		MOV32mr <fi#4>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n1] GR32:%vreg6
224B		%vreg6<def,tied1> = XOR32rm %vreg6<tied0>, <fi#2>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%key.addr] GR32:%vreg6
256B		%vreg6<def,tied1> = XOR32ri8 %vreg6<tied0>, 1, %EFLAGS<imp-def,dead>; GR32:%vreg6
272B		MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n2] GR32:%vreg6
304B		%vreg6<def,tied1> = AND32rm %vreg6<tied0>, <fi#3>, 1, %noreg, 0, %noreg, %EFLAGS<imp-def,dead>; mem:LD4[%i3.addr] GR32:%vreg6
320B		MOV32mr <fi#6>, 1, %noreg, 0, %noreg, %vreg6; mem:ST4[%n3] GR32:%vreg6
336B		%EAX<def> = COPY %vreg6; GR32:%vreg6
352B		RETQ %EAX<kill>

# End machine code for function leak.

Before MISsched:
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

BB#0: derived from LLVM BB %entry
	MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%retval]
	MOV32mi <fi#1>, 1, %noreg, 0, %noreg, 1; mem:ST4[%i1]
	MOV32mi <fi#2>, 1, %noreg, 0, %noreg, 0; mem:ST4[%i2]
	MOV32mi <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST4[%i3]
	MOV32mi <fi#4>, 1, %noreg, 0, %noreg, 1; mem:ST4[%i4]
	%vreg0<def> = MOV32rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD4[%i1] GR32:%vreg0
	%vreg1<def> = MOV32rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD4[%i2] GR32:%vreg1
	%vreg2<def> = MOV32rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD4[%i3] GR32:%vreg2
	ADJCALLSTACKDOWN64 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%EDI<def> = COPY %vreg0; GR32:%vreg0
	%ESI<def> = COPY %vreg1; GR32:%vreg1
	%EDX<def> = COPY %vreg2; GR32:%vreg2
	%ECX<def> = MOV32ri 1
	CALL64pcrel32 <ga:@leak>, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>, %ESI<imp-use,kill>, %EDX<imp-use,kill>, %ECX<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>
	ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
	%vreg4<def> = COPY %EAX<kill>; GR32:%vreg4
	MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg4; mem:ST4[%res] GR32:%vreg4
	%EAX<def> = COPY %vreg4; GR32:%vreg4
	RETQ %EAX<kill>

# End machine code for function main.

********** MI Scheduling **********
main:BB#0 entry
  From: %vreg4<def> = COPY %EAX<kill>; GR32:%vreg4
    To: RETQ %EAX<kill>
 RegionInstrs: 3 Remaining: 15
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %vreg4<def> = COPY %EAX<kill>; GR32:%vreg4
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
   val SU(2): Latency=0 Reg=%vreg4
   val SU(1): Latency=0 Reg=%vreg4
   antiSU(2): Latency=0

SU(1):   MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg4; mem:ST4[%res] GR32:%vreg4
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
   val SU(0): Latency=0 Reg=%vreg4

SU(2):   %EAX<def> = COPY %vreg4; GR32:%vreg4
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
   val SU(0): Latency=0 Reg=%vreg4
   antiSU(0): Latency=0
  Successors:
   ch  SU(4294967295) *: Latency=0

Critical Path(GS-RR ): 0
BotQ.A: 1 2 
  SU(1) ORDER                              
  SU(2) PREG-COPY                         
Pick Bot PREG-COPY
Scheduling SU(2) %EAX<def> = COPY %vreg4; GR32:%vreg4
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
Scheduling SU(1) MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg4; mem:ST4[%res] GR32:%vreg4
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
Scheduling SU(0) %vreg4<def> = COPY %EAX<kill>; GR32:%vreg4
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
*** Final schedule for BB#0 ***
SU(0):   %vreg4<def> = COPY %EAX<kill>; GR32:%vreg4
SU(1):   MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg4; mem:ST4[%res] GR32:%vreg4
SU(2):   %EAX<def> = COPY %vreg4; GR32:%vreg4

********** MI Scheduling **********
main:BB#0 entry
  From: %EDI<def> = COPY %vreg0; GR32:%vreg0
    To: CALL64pcrel32 <ga:@leak>, <regmask>, %RSP<imp-use>, %EDI<imp-use,kill>, %ESI<imp-use,kill>, %EDX<imp-use,kill>, %ECX<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>
 RegionInstrs: 4 Remaining: 9
SU(0):   %EDI<def> = COPY %vreg0; GR32:%vreg0
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(1):   %ESI<def> = COPY %vreg1; GR32:%vreg1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(2):   %EDX<def> = COPY %vreg2; GR32:%vreg2
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
   ch  SU(4294967295) *: Latency=0

SU(3):   %ECX<def> = MOV32ri 1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
   ch  SU(4294967295) *: Latency=1

Critical Path(GS-RR ): 1
BotQ.A: 3 2 1 0 
  SU(3) ORDER                              
  SU(2) PREG-COPY                         
Pick Bot PREG-COPY
Scheduling SU(2) %EDX<def> = COPY %vreg2; GR32:%vreg2
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
BotQ.A: 3 0 1 
  SU(3) ORDER                              
  SU(0) PREG-COPY                         
  SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %ESI<def> = COPY %vreg1; GR32:%vreg1
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
BotQ.A: 3 0 
  SU(3) ORDER                              
  SU(0) PREG-COPY                         
Pick Bot PREG-COPY
Scheduling SU(0) %EDI<def> = COPY %vreg0; GR32:%vreg0
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
Scheduling SU(3) %ECX<def> = MOV32ri 1
  Ready @1c
  BotQ.A BotLatency SU(3) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 1c
  - Latency limited.
*** Final schedule for BB#0 ***
SU(3):   %ECX<def> = MOV32ri 1
SU(0):   %EDI<def> = COPY %vreg0; GR32:%vreg0
SU(1):   %ESI<def> = COPY %vreg1; GR32:%vreg1
SU(2):   %EDX<def> = COPY %vreg2; GR32:%vreg2

********** MI Scheduling **********
main:BB#0 entry
  From: MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%retval]
    To: ADJCALLSTACKDOWN64 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
 RegionInstrs: 8 Remaining: 0
Max Pressure: GR64=6
Live In: 
Live Out: %vreg2 %vreg1 %vreg0 
Live Thru: 
  LiveReg: %vreg2
  LiveReg: %vreg1
  LiveReg: %vreg0
Excess PSets: 
SU(0):   MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%retval]
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0

SU(1):   MOV32mi <fi#1>, 1, %noreg, 0, %noreg, 1; mem:ST4[%i1]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   ch  SU(5): Latency=1

SU(2):   MOV32mi <fi#2>, 1, %noreg, 0, %noreg, 0; mem:ST4[%i2]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   ch  SU(6): Latency=1

SU(3):   MOV32mi <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST4[%i3]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
   ch  SU(7): Latency=1

SU(4):   MOV32mi <fi#4>, 1, %noreg, 0, %noreg, 1; mem:ST4[%i4]
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0

SU(5):   %vreg0<def> = MOV32rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD4[%i1] GR32:%vreg0
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
   ch  SU(1): Latency=1
  Successors:
   ch  SU(4294967295) *: Latency=3

SU(6):   %vreg1<def> = MOV32rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD4[%i2] GR32:%vreg1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
   ch  SU(2): Latency=1
  Successors:
   ch  SU(4294967295) *: Latency=3

SU(7):   %vreg2<def> = MOV32rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD4[%i3] GR32:%vreg2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 1
  Height             : 3
  Predecessors:
   ch  SU(3): Latency=1
  Successors:
   ch  SU(4294967295) *: Latency=3

Critical Path(GS-RR ): 4
BotQ.A: 4 0 7 6 5 
  SU(4) ORDER                              
  SU(7) ORDER                              
Pick Bot ORDER     
Scheduling SU(7) %vreg2<def> = MOV32rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD4[%i3] GR32:%vreg2
  Ready @3c
  BotQ.A TopLatency SU(7) 1c
  BotQ.A BotLatency SU(7) 3c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 3c
  - Latency limited.
BotQ.A: 4 0 5 6 3 
  SU(4) ORDER                              
  SU(5) ORDER                              
  SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %vreg1<def> = MOV32rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD4[%i2] GR32:%vreg1
  Ready @3c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 3c
  - Latency limited.
BotQ.A: 4 0 5 3 2 
  SU(4) ORDER                              
  SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %vreg0<def> = MOV32rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD4[%i1] GR32:%vreg0
  Ready @3c
BotQ.A @0c
  Retired: 3
  Executed: 0c
  Critical: 0c, 3 MOps
  ExpectedLatency: 3c
  - Latency limited.
BotQ.A: 4 0 2 3 1 
  SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) MOV32mi <fi#4>, 1, %noreg, 0, %noreg, 1; mem:ST4[%i4]
  Ready @0c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 MOps
  ExpectedLatency: 3c
  - Latency limited.
BotQ.A: 1 0 2 3 
  SU(1) ORDER                              
  SU(2) ORDER                              
  SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) MOV32mi <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST4[%i3]
  Ready @4c
  BotQ.A BotLatency SU(3) 4c
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 5 MOps
  ExpectedLatency: 4c
  - Latency limited.
BotQ.A: 1 0 2 
  SU(1) ORDER                              
  SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) MOV32mi <fi#2>, 1, %noreg, 0, %noreg, 0; mem:ST4[%i2]
  Ready @4c
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 6 MOps
  ExpectedLatency: 4c
  - Latency limited.
BotQ.A: 1 0 
  SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) MOV32mi <fi#1>, 1, %noreg, 0, %noreg, 1; mem:ST4[%i1]
  Ready @4c
BotQ.A @1c
  Retired: 7
  Executed: 1c
  Critical: 1c, 7 MOps
  ExpectedLatency: 4c
  - Latency limited.
Scheduling SU(0) MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%retval]
  Ready @1c
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 8
  Executed: 2c
  Critical: 2c, 8 MOps
  ExpectedLatency: 4c
  - Latency limited.
*** Final schedule for BB#0 ***
SU(0):   MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%retval]
SU(1):   MOV32mi <fi#1>, 1, %noreg, 0, %noreg, 1; mem:ST4[%i1]
SU(2):   MOV32mi <fi#2>, 1, %noreg, 0, %noreg, 0; mem:ST4[%i2]
SU(3):   MOV32mi <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST4[%i3]
SU(4):   MOV32mi <fi#4>, 1, %noreg, 0, %noreg, 1; mem:ST4[%i4]
SU(5):   %vreg0<def> = MOV32rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD4[%i1] GR32:%vreg0
SU(6):   %vreg1<def> = MOV32rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD4[%i2] GR32:%vreg1
SU(7):   %vreg2<def> = MOV32rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD4[%i3] GR32:%vreg2

********** INTERVALS **********
DH [248r,256r:0)  0@248r
DIL [232r,256r:0)  0@232r
DL [248r,256r:0)  0@248r
SIL [240r,256r:0)  0@240r
%vreg0 [96r,232r:0)  0@96r
%vreg1 [112r,240r:0)  0@112r
%vreg2 [128r,248r:0)  0@128r
%vreg4 [272r,304r:0)  0@272r
RegMasks: 256r
********** MACHINEINSTRS **********
# Machine code for function main: Post SSA
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	BB#0: derived from LLVM BB %entry
16B		MOV32mi <fi#0>, 1, %noreg, 0, %noreg, 0; mem:ST4[%retval]
32B		MOV32mi <fi#1>, 1, %noreg, 0, %noreg, 1; mem:ST4[%i1]
48B		MOV32mi <fi#2>, 1, %noreg, 0, %noreg, 0; mem:ST4[%i2]
64B		MOV32mi <fi#3>, 1, %noreg, 0, %noreg, 0; mem:ST4[%i3]
80B		MOV32mi <fi#4>, 1, %noreg, 0, %noreg, 1; mem:ST4[%i4]
96B		%vreg0<def> = MOV32rm <fi#1>, 1, %noreg, 0, %noreg; mem:LD4[%i1] GR32:%vreg0
112B		%vreg1<def> = MOV32rm <fi#2>, 1, %noreg, 0, %noreg; mem:LD4[%i2] GR32:%vreg1
128B		%vreg2<def> = MOV32rm <fi#3>, 1, %noreg, 0, %noreg; mem:LD4[%i3] GR32:%vreg2
144B		ADJCALLSTACKDOWN64 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
224B		%ECX<def> = MOV32ri 1
232B		%EDI<def> = COPY %vreg0; GR32:%vreg0
240B		%ESI<def> = COPY %vreg1; GR32:%vreg1
248B		%EDX<def> = COPY %vreg2; GR32:%vreg2
256B		CALL64pcrel32 <ga:@leak>, <regmask>, %RSP<imp-use>, %EDI<imp-use>, %ESI<imp-use>, %EDX<imp-use>, %ECX<imp-use,kill>, %RSP<imp-def>, %EAX<imp-def>
264B		ADJCALLSTACKUP64 0, 0, %RSP<imp-def>, %EFLAGS<imp-def,dead>, %RSP<imp-use>
272B		%vreg4<def> = COPY %EAX<kill>; GR32:%vreg4
288B		MOV32mr <fi#5>, 1, %noreg, 0, %noreg, %vreg4; mem:ST4[%res] GR32:%vreg4
304B		%EAX<def> = COPY %vreg4; GR32:%vreg4
320B		RETQ %EAX<kill>

# End machine code for function main.

