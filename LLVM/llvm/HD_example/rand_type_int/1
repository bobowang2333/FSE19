(set-option :fixedpoint.engine datalog)
; this sort is used to define all the relations
(define-sort s () (_ BitVec 8))
(define-sort BitSet () (_ BitVec 32))
(define-sort Set () (Array s bool))

; assignment (assign from to)
(declare-rel assign(s s))
(declare-rel xor_assign (s s))

; TDEP relation: (TDEP xxx, xxx)
(declare-rel TDEP (s s))
; KEY_SENSITIVE relation: KEY_SENSITIVE(var)
(declare-rel KEY_SENSITIVE (s))
(declare-rel KEY_IND (s))
(declare-rel PLAIN (s))
(declare-rel RAND (s))
; define how many random variables here (user specified)
(declare-rel RAND_NUMBER (BitSet))

(declare-rel RAND_VAR (s BitSet))
(declare-rel ALL_INCLUDE (s BitSet))

(declare-var var s)
(declare-var prev s)
(declare-var to s)
(declare-var from s)
(declare-var from1 s)
(declare-var from2 s)
(declare-var RAND_A BitSet)
(declare-var RAND_B BitSet)
(declare-var RAND_C BitSet)
(declare-var ALL_INC_A BitSet)
(declare-var ALL_INC_B BitSet)
(declare-var ALL_INC_C BitSet)
(declare-var RAND_NUM BitSet)

; set theory operation define (on bitVectors)
; "Diff" Op: xor x ^ y = (~x & y) | (x & ~y)
; "Diff" x\y = x & (x ^ y)
(define-fun set_diff ((x BitSet) (y BitSet)) BitSet
(bvand x (bvor (bvand (bvnot x) y) (bvand x (bvnot y))))
)

(define-fun set_intersect ((x BitSet) (y BitSet)) BitSet
(bvand x y)
)

;for 8-bit vector 
(define-fun IsEmpty ((x BitSet)) bool
(= x #x00000000)
)

(define-fun set_or ((x BitSet) (y BitSet)) BitSet
(bvor x y)
)

(define-fun set_and ((x BitSet) (y BitSet)) BitSet
(bvand x y)
)

(define-fun set_no ((x BitSet)) BitSet
(bvnot x)
)
; res = (x | y) - (x & y) = x ^ y
(define-fun set_sum ((x BitSet) (y BitSet)) BitSet
(bvor (bvand x (bvnot y)) (bvand (bvnot x) y))
)

; ALL_INC(res) =( set_sum (rand_a, rand_b) or (not RAND_NUM)) and (RAND_A or RAND_B)
(define-fun xor_rud1_all_inc ((x_a BitSet) (y_a BitSet) (n BitSet)) BitSet
(bvand (bvor x_a y_a) (bvor (bvor (bvand x_a (bvnot y_a)) (bvand (bvnot x_a) y_a)) (bvnot n)))
)

; the TDEP relation defines what it transitively depends on
(rule (=> (assign to from) (TDEP to from)))
(rule (=> (xor_assign to from) (assign to from)))

; transitive closure of its assignments
(rule (=> (and (assign to from) (TDEP from prev)) (TDEP to prev)))
; transitive closure of its assignments
(rule (=> (and (assign to from) (KEY_SENSITIVE from)) (KEY_SENSITIVE to)))

; test bitvector operation

; rule: (XOR-RUD1)
; (rule (=> (and (xor_assign to from1) (xor_assign to from2) (RAND_VAR from1 RAND_A) (RAND_VAR from2 RAND_B) (RAND_VAR to RAND_C) (RAND_NUMBER RAND_NUM) (ALL_INCLUDE from1 ALL_INC_A) (ALL_INCLUDE from2 ALL_INC_B) (ALL_INCLUDE to ALL_INC_C) (RAND from1) (not (IsEmpty (set_diff RAND_A ALL_INC_B)))) (and (RAND to) (= RAND_C (set_diff RAND_A RAND_B)) (= ALL_INC_C RAND_NUM))))

; user specify the sensitive variable
(rule (KEY_SENSITIVE #b00000100))
(rule (RAND #b00000001))
(rule (RAND #b00000010))
(rule (RAND #b00000011))
; if there are 3 random varibles RAND_NUM = #b0000_0111
(rule (RAND_NUMBER #x00000007))
; RAND_VAR (varID + bool_array(bitVector))
(rule (RAND_VAR #b00000001 #x00000001))
(rule (RAND_VAR #b00000010 #x00000002))
(rule (RAND_VAR #b00000011 #x00000004))
; ALL_INCLUDE (varID + bool_array (representing all variables r0, r1, ... k0, k1...))
(rule (ALL_INCLUDE #x01 #x00000001))
(rule (ALL_INCLUDE #x02 #x00000002))
(rule (ALL_INCLUDE #x03 #x00000004))

;### Begin facts 
;   %0 = load i32* %k.addr, align 4
(rule (assign #b00001111 #b00000100))
;   %1 = load i32* %r2.addr, align 4
(rule (assign #b00010000 #b00000010))
;   %xor = xor i32 %0, %1
(rule (xor_assign #b00010001 #b00001111))
;   %xor = xor i32 %0, %1
(rule (xor_assign #b00010001 #b00010000))
;   store i32 %xor, i32* %c1, align 4
(rule (assign #b00000101 #b00010001))
;   %2 = load i32* %r1.addr, align 4
(rule (assign #b00010011 #b00000001))
;   %3 = load i32* %r2.addr, align 4
(rule (assign #b00010100 #b00000010))
;   %xor1 = xor i32 %2, %3
(rule (xor_assign #b00010101 #b00010011))
;   %xor1 = xor i32 %2, %3
(rule (xor_assign #b00010101 #b00010100))
;   store i32 %xor1, i32* %c2, align 4
(rule (assign #b00000110 #b00010101))
;   %4 = load i32* %c2, align 4
(rule (assign #b00010111 #b00000110))
;   %5 = load i32* %c1, align 4
(rule (assign #b00011000 #b00000101))
;   %xor2 = xor i32 %4, %5
(rule (xor_assign #b00011001 #b00010111))
;   %xor2 = xor i32 %4, %5
(rule (xor_assign #b00011001 #b00011000))
;   store i32 %xor2, i32* %c3, align 4
(rule (assign #b00000111 #b00011001))
;   %6 = load i32* %c3, align 4
(rule (assign #b00011011 #b00000111))
;   %7 = load i32* %c2, align 4
(rule (assign #b00011100 #b00000110))
;   %xor3 = xor i32 %6, %7
(rule (xor_assign #b00011101 #b00011011))
;   %xor3 = xor i32 %6, %7
(rule (xor_assign #b00011101 #b00011100))
;   store i32 %xor3, i32* %c4, align 4
(rule (assign #b00001000 #b00011101))
;   %8 = load i32* %c4, align 4
(rule (assign #b00011111 #b00001000))
;   %9 = load i32* %r1.addr, align 4
(rule (assign #b00100000 #b00000001))
;   %xor4 = xor i32 %8, %9
(rule (xor_assign #b00100001 #b00011111))
;   %xor4 = xor i32 %8, %9
(rule (xor_assign #b00100001 #b00100000))
;   store i32 %xor4, i32* %c5, align 4
(rule (assign #b00001001 #b00100001))
;   %10 = load i32* %c5, align 4
(rule (assign #b00100011 #b00001001))
;   %11 = load i32* %r3.addr, align 4
(rule (assign #b00100100 #b00000011))
;   %and = and i32 %10, %11
(rule (assign #b00100101 #b00100011))
;   %and = and i32 %10, %11
(rule (assign #b00100101 #b00100100))
;   store i32 %and, i32* %c6, align 4
(rule (assign #b00001010 #b00100101))
;   %12 = load i32* %c6, align 4
(rule (assign #b00100111 #b00001010))
;###### End Facts

(query KEY_SENSITIVE :print-answer true)
